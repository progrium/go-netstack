// automatically generated by stateify.

package sockfs

import (
	"github.com/progrium/go-netstack/gvisor/pkg/state"
)

func (fsType *filesystemType) StateTypeName() string {
	return "pkg/sentry/fsimpl/sockfs.filesystemType"
}

func (fsType *filesystemType) StateFields() []string {
	return []string{}
}

func (fsType *filesystemType) beforeSave() {}

// +checklocksignore
func (fsType *filesystemType) StateSave(stateSinkObject state.Sink) {
	fsType.beforeSave()
}

func (fsType *filesystemType) afterLoad() {}

// +checklocksignore
func (fsType *filesystemType) StateLoad(stateSourceObject state.Source) {
}

func (fs *filesystem) StateTypeName() string {
	return "pkg/sentry/fsimpl/sockfs.filesystem"
}

func (fs *filesystem) StateFields() []string {
	return []string{
		"Filesystem",
		"devMinor",
	}
}

func (fs *filesystem) beforeSave() {}

// +checklocksignore
func (fs *filesystem) StateSave(stateSinkObject state.Sink) {
	fs.beforeSave()
	stateSinkObject.Save(0, &fs.Filesystem)
	stateSinkObject.Save(1, &fs.devMinor)
}

func (fs *filesystem) afterLoad() {}

// +checklocksignore
func (fs *filesystem) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &fs.Filesystem)
	stateSourceObject.Load(1, &fs.devMinor)
}

func (i *inode) StateTypeName() string {
	return "pkg/sentry/fsimpl/sockfs.inode"
}

func (i *inode) StateFields() []string {
	return []string{
		"InodeAnonymous",
		"InodeAttrs",
		"InodeNoopRefCount",
		"InodeNotDirectory",
		"InodeNotSymlink",
		"InodeWatches",
	}
}

func (i *inode) beforeSave() {}

// +checklocksignore
func (i *inode) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.InodeAnonymous)
	stateSinkObject.Save(1, &i.InodeAttrs)
	stateSinkObject.Save(2, &i.InodeNoopRefCount)
	stateSinkObject.Save(3, &i.InodeNotDirectory)
	stateSinkObject.Save(4, &i.InodeNotSymlink)
	stateSinkObject.Save(5, &i.InodeWatches)
}

func (i *inode) afterLoad() {}

// +checklocksignore
func (i *inode) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.InodeAnonymous)
	stateSourceObject.Load(1, &i.InodeAttrs)
	stateSourceObject.Load(2, &i.InodeNoopRefCount)
	stateSourceObject.Load(3, &i.InodeNotDirectory)
	stateSourceObject.Load(4, &i.InodeNotSymlink)
	stateSourceObject.Load(5, &i.InodeWatches)
}

func init() {
	state.Register((*filesystemType)(nil))
	state.Register((*filesystem)(nil))
	state.Register((*inode)(nil))
}
